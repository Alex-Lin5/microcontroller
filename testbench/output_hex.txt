05 // ACC = 01
05 // MOV R1 ACC, R1 = 8'h05
04 // ACC = 00
FF // ACC - R1
FF // MOV R11 ACC
04 // ACC + R1 = FF+05
08 // ACC << 1 
F2 // ACC NOR R1 
79 // ACC >> 1
05 // MOV ACC R1
05 // NOP ------------------------------
03 // LD ACC #(03)
02 // ADD ACC R1(FF) --loop1 start
02 // JZ0
02 // JC1
01 // ADD ACC R1(FF)
01 // JZ0
01 // JC1
00 // ADD ACC R1(FF)
00 // JZ1 --loop1 end
FB // ACC - R1 = 0-5 --loop2 start
FB // JC1
F6 // ACC - R1
F6 // JC0 -- loop2 end
F6 // NOP ------------------------------
03 // ACC = 03
03 // MOV R2 ACC, R2 = 8'h03
08 // ACC #(), R16 upper bits 
10 // ACC << 1 
20 // ACC << 1 
20 // MOV R16 ACC
01 // ACC #(), R16 lower bits
21 // ADD ACC R16
21 // MOV R16 ACC, R16 = 20
1E // ACC - R2
1E // MOV R15 ACC
03 // LD ACC #(03)
02 // ADD ACC R1(FF) --loop11 start
02 // JZ0
02 // JC1 R15
01 // ADD ACC R1(FF)
01 // JZ0
01 // JC1
00 // ADD ACC R1(FF)
00 // JZ1 R16 --loop11 end
FB // ACC - R1 = 0-5 --loop22 start
FB // JC1
F6 // ACC - R1
F6 // JC0 -- loop22 end
F6 // NOP ------------------------------
F6 // HALT